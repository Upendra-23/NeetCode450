class Solution {
    void merge(int low,int mid,int high,vector<int> &nums){
        int left = low, right = mid+1;
        vector<int> temp;
        while(left <= mid && right <= high){
            if(nums[left] < nums[right]){
                temp.push_back(nums[left]);
                left++;
            }
            else{
                temp.push_back(nums[right]);
                right++;
            }
        }
        while(left <= mid){
            temp.push_back(nums[left]);
            left++;
        }
        while(right <= high){
            temp.push_back(nums[right]);
            right++;
        }
        for(int i=low;i<=high;i++)
            nums[i] = temp[i-low];
    }
    void mergesort(int low,int high,vector<int> &nums){
        if(low >= high) return;
        int mid = (low+high)/2;
        mergesort(low,mid,nums);
        mergesort(mid+1,high,nums);
        merge(low,mid,high,nums);
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        mergesort(0,nums.size()-1,nums);
        return nums;
    }
};
